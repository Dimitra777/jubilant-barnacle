/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
 * –í–∫–ª—é—á–∞–µ—Ç: –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–∞–º—è—Ç—å, –∏—Å—Ç–æ—Ä–∏—é, —Ç–µ–º—ã, –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
 */

// ===== UTILITY CLASSES =====

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
class ToastManager {
    constructor() {
        this.container = document.getElementById('toast-container');
    }

    show(message, type = 'success', duration = 3000) {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        
        this.container.appendChild(toast);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            toast.style.animation = 'toastSlideIn 0.3s ease reverse';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, duration);
    }

    success(message) {
        this.show(message, 'success');
    }

    error(message) {
        this.show(message, 'error');
    }

    warning(message) {
        this.show(message, 'warning');
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
 */
class ThemeManager {
    constructor() {
        this.currentTheme = localStorage.getItem('calculator-theme') || 'light';
        this.themeToggle = document.getElementById('theme-toggle');
        this.themeIcon = this.themeToggle.querySelector('.theme-icon');
        
        this.init();
    }

    init() {
        this.applyTheme(this.currentTheme);
        this.themeToggle.addEventListener('click', () => this.toggleTheme());
    }

    toggleTheme() {
        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.applyTheme(this.currentTheme);
        localStorage.setItem('calculator-theme', this.currentTheme);
    }

    applyTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        this.themeIcon.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 */
class HistoryManager {
    constructor() {
        this.history = JSON.parse(localStorage.getItem('calculator-history')) || [];
        this.historyPanel = document.getElementById('history-panel');
        this.historyList = document.getElementById('history-list');
        this.historyToggle = document.getElementById('history-toggle');
        this.clearHistory = document.getElementById('clear-history');
        this.isVisible = false;
        
        this.init();
    }

    init() {
        this.renderHistory();
        this.historyToggle.addEventListener('click', () => this.togglePanel());
        this.clearHistory.addEventListener('click', () => this.clear());
        this.historyList.addEventListener('click', (e) => this.handleHistoryClick(e));
    }

    add(expression, result) {
        const historyItem = {
            id: Date.now(),
            expression,
            result,
            timestamp: new Date().toLocaleString()
        };
        
        this.history.unshift(historyItem);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (this.history.length > 50) {
            this.history = this.history.slice(0, 50);
        }
        
        this.saveHistory();
        this.renderHistory();
    }

    clear() {
        this.history = [];
        this.saveHistory();
        this.renderHistory();
        window.toast.success('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
    }

    togglePanel() {
        this.isVisible = !this.isVisible;
        this.historyPanel.classList.toggle('visible', this.isVisible);
    }

    handleHistoryClick(e) {
        const historyItem = e.target.closest('.history-item');
        if (historyItem) {
            const result = historyItem.querySelector('.history-result').textContent;
            window.calculator.setDisplay(result);
            this.togglePanel(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        }
    }

    renderHistory() {
        if (this.history.length === 0) {
            this.historyList.innerHTML = '<div class="history-empty">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
            return;
        }

        this.historyList.innerHTML = this.history
            .map(item => `
                <div class="history-item" data-id="${item.id}">
                    <div class="history-expression">${item.expression}</div>
                    <div class="history-result">${item.result}</div>
                </div>
            `).join('');
    }

    saveHistory() {
        localStorage.setItem('calculator-history', JSON.stringify(this.history));
    }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
class MemoryManager {
    constructor() {
        this.memory = parseFloat(localStorage.getItem('calculator-memory')) || 0;
        this.memoryButtons = {
            clear: document.getElementById('memory-clear'),
            recall: document.getElementById('memory-recall'),
            add: document.getElementById('memory-add'),
            subtract: document.getElementById('memory-subtract'),
            store: document.getElementById('memory-store')
        };
        
        this.init();
    }

    init() {
        this.updateMemoryDisplay();
        
        Object.entries(this.memoryButtons).forEach(([action, button]) => {
            button.addEventListener('click', () => this[action]());
        });
    }

    clear() {
        this.memory = 0;
        this.saveMemory();
        this.updateMemoryDisplay();
        window.toast.success('–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞');
    }

    recall() {
        if (this.memory !== 0) {
            window.calculator.setDisplay(this.memory.toString());
            window.toast.success(`–ò–∑ –ø–∞–º—è—Ç–∏: ${this.memory}`);
        } else {
            window.toast.warning('–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞');
        }
    }

    add() {
        const currentValue = parseFloat(window.calculator.getCurrentValue());
        if (!isNaN(currentValue)) {
            this.memory += currentValue;
            this.saveMemory();
            this.updateMemoryDisplay();
            window.toast.success(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: ${currentValue}`);
        }
    }

    subtract() {
        const currentValue = parseFloat(window.calculator.getCurrentValue());
        if (!isNaN(currentValue)) {
            this.memory -= currentValue;
            this.saveMemory();
            this.updateMemoryDisplay();
            window.toast.success(`–í—ã—á—Ç–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏: ${currentValue}`);
        }
    }

    store() {
        const currentValue = parseFloat(window.calculator.getCurrentValue());
        if (!isNaN(currentValue)) {
            this.memory = currentValue;
            this.saveMemory();
            this.updateMemoryDisplay();
            window.toast.success(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: ${currentValue}`);
        }
    }

    updateMemoryDisplay() {
        const hasMemory = this.memory !== 0;
        Object.values(this.memoryButtons).forEach(button => {
            button.classList.toggle('active', hasMemory);
        });
    }

    saveMemory() {
        localStorage.setItem('calculator-memory', this.memory.toString());
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
class Calculator {
    constructor() {
        this.expressionElement = document.getElementById('expression');
        this.resultElement = document.getElementById('result');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        this.currentExpression = '';
        this.previousResult = 0;
        this.shouldResetDisplay = false;
        this.lastOperator = null;
        this.lastOperand = null;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.numberButtons = document.querySelectorAll('.btn-number');
        this.operatorButtons = document.querySelectorAll('.btn-operator');
        this.functionButtons = document.querySelectorAll('.function-btn');
        this.controlButtons = {
            equals: document.getElementById('btn-equals'),
            clear: document.getElementById('btn-clear'),
            clearEntry: document.getElementById('btn-clear-entry'),
            backspace: document.getElementById('btn-backspace'),
            decimal: document.getElementById('btn-decimal'),
            square: document.getElementById('btn-square'),
            sqrt: document.getElementById('btn-sqrt'),
            reciprocal: document.getElementById('btn-reciprocal'),
            percent: document.getElementById('btn-percent')
        };
        
        this.init();
    }

    init() {
        this.attachEventListeners();
        this.attachKeyboardListeners();
        this.updateDisplay();
    }

    attachEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —á–∏—Å–µ–ª
        this.numberButtons.forEach(button => {
            button.addEventListener('click', () => {
                const number = button.dataset.number;
                this.inputNumber(number);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        this.operatorButtons.forEach(button => {
            button.addEventListener('click', () => {
                const operator = button.dataset.operator;
                this.inputOperator(operator);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.controlButtons.equals.addEventListener('click', () => this.calculate());
        this.controlButtons.clear.addEventListener('click', () => this.clear());
        this.controlButtons.clearEntry.addEventListener('click', () => this.clearEntry());
        this.controlButtons.backspace.addEventListener('click', () => this.backspace());
        this.controlButtons.decimal.addEventListener('click', () => this.inputDecimal());

        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        this.controlButtons.square.addEventListener('click', () => this.square());
        this.controlButtons.sqrt.addEventListener('click', () => this.sqrt());
        this.controlButtons.reciprocal.addEventListener('click', () => this.reciprocal());
        this.controlButtons.percent.addEventListener('click', () => this.percent());
    }

    attachKeyboardListeners() {
        document.addEventListener('keydown', (e) => {
            e.preventDefault();
            
            // –ß–∏—Å–ª–∞
            if (e.key >= '0' && e.key <= '9') {
                this.inputNumber(e.key);
            }
            // –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
            else if (e.key === '+') this.inputOperator('+');
            else if (e.key === '-') this.inputOperator('-');
            else if (e.key === '*') this.inputOperator('*');
            else if (e.key === '/') this.inputOperator('/');
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            else if (e.key === 'Enter' || e.key === '=') this.calculate();
            else if (e.key === 'Escape') this.clear();
            else if (e.key === 'Delete') this.clearEntry();
            else if (e.key === 'Backspace') this.backspace();
            else if (e.key === '.' || e.key === ',') this.inputDecimal();
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            else if (e.key.toLowerCase() === 'h') {
                window.historyManager.togglePanel();
            }
        });
    }

    inputNumber(number) {
        if (this.shouldResetDisplay) {
            this.currentExpression = '';
            this.shouldResetDisplay = false;
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω—É–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ
        if (this.currentExpression === '0' && number === '0') {
            return;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–ª—å
        if (this.currentExpression === '0' && number !== '0') {
            this.currentExpression = number;
        } else {
            this.currentExpression += number;
        }
        
        this.updateDisplay();
    }

    inputOperator(operator) {
        if (this.currentExpression === '') {
            this.currentExpression = this.previousResult.toString();
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        if (this.isLastCharOperator()) {
            this.currentExpression = this.currentExpression.slice(0, -1) + operator;
        } else {
            this.currentExpression += operator;
        }
        
        this.updateDisplay();
    }

    inputDecimal() {
        if (this.shouldResetDisplay) {
            this.currentExpression = '0';
            this.shouldResetDisplay = false;
        }
        
        const parts = this.currentExpression.split(/[+\-*/]/);
        const lastPart = parts[parts.length - 1];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∏—Å–ª–µ
        if (!lastPart.includes('.')) {
            if (this.currentExpression === '' || this.isLastCharOperator()) {
                this.currentExpression += '0.';
            } else {
                this.currentExpression += '.';
            }
            this.updateDisplay();
        }
    }

    calculate() {
        if (this.currentExpression === '') {
            return;
        }
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            const originalExpression = this.currentExpression;
            
            // –ó–∞–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            const expression = this.currentExpression
                .replace(/√ó/g, '*')
                .replace(/√∑/g, '/');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if (this.isValidExpression(expression)) {
                const result = this.evaluateExpression(expression);
                
                if (isNaN(result) || !isFinite(result)) {
                    throw new Error('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
                }
                
                this.previousResult = result;
                this.currentExpression = this.formatNumber(result);
                this.shouldResetDisplay = true;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                window.historyManager.add(
                    this.formatExpressionForHistory(originalExpression), 
                    this.currentExpression
                );
                
            } else {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ');
            }
        } catch (error) {
            window.toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è');
            this.currentExpression = '–û—à–∏–±–∫–∞';
        }
        
        this.updateDisplay();
    }

    square() {
        const currentValue = this.getCurrentNumber();
        if (currentValue !== null) {
            const result = currentValue * currentValue;
            this.replaceCurrentNumber(result);
            window.historyManager.add(`sqr(${currentValue})`, result.toString());
        }
    }

    sqrt() {
        const currentValue = this.getCurrentNumber();
        if (currentValue !== null) {
            if (currentValue < 0) {
                window.toast.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–µ–Ω—å –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞');
                return;
            }
            const result = Math.sqrt(currentValue);
            this.replaceCurrentNumber(result);
            window.historyManager.add(`‚àö(${currentValue})`, result.toString());
        }
    }

    reciprocal() {
        const currentValue = this.getCurrentNumber();
        if (currentValue !== null) {
            if (currentValue === 0) {
                window.toast.error('–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
                return;
            }
            const result = 1 / currentValue;
            this.replaceCurrentNumber(result);
            window.historyManager.add(`1/(${currentValue})`, result.toString());
        }
    }

    percent() {
        const currentValue = this.getCurrentNumber();
        if (currentValue !== null) {
            const result = currentValue / 100;
            this.replaceCurrentNumber(result);
            window.historyManager.add(`${currentValue}%`, result.toString());
        }
    }

    clear() {
        this.currentExpression = '';
        this.previousResult = 0;
        this.shouldResetDisplay = false;
        this.lastOperator = null;
        this.lastOperand = null;
        this.updateDisplay();
    }

    clearEntry() {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const lastOperatorIndex = Math.max(
            this.currentExpression.lastIndexOf('+'),
            this.currentExpression.lastIndexOf('-'),
            this.currentExpression.lastIndexOf('*'),
            this.currentExpression.lastIndexOf('/')
        );
        
        if (lastOperatorIndex >= 0) {
            this.currentExpression = this.currentExpression.substring(0, lastOperatorIndex + 1);
        } else {
            this.currentExpression = '';
        }
        
        this.updateDisplay();
    }

    backspace() {
        if (this.currentExpression.length > 0) {
            this.currentExpression = this.currentExpression.slice(0, -1);
            this.updateDisplay();
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã

    getCurrentNumber() {
        const parts = this.currentExpression.split(/[+\-*/]/);
        const lastPart = parts[parts.length - 1];
        const number = parseFloat(lastPart);
        return isNaN(number) ? null : number;
    }

    replaceCurrentNumber(newNumber) {
        const formattedNumber = this.formatNumber(newNumber);
        const parts = this.currentExpression.split(/([+\-*/])/);
        parts[parts.length - 1] = formattedNumber;
        this.currentExpression = parts.join('');
        this.updateDisplay();
    }

    getCurrentValue() {
        return this.currentExpression || '0';
    }

    setDisplay(value) {
        this.currentExpression = value;
        this.shouldResetDisplay = true;
        this.updateDisplay();
    }

    isLastCharOperator() {
        const lastChar = this.currentExpression.slice(-1);
        return ['+', '-', '*', '/'].includes(lastChar);
    }

    isValidExpression(expression) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if (expression === '' || this.isLastCharOperator()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if (!/^[0-9+\-*/.() ]+$/.test(expression)) {
            return false;
        }
        
        return true;
    }

    evaluateExpression(expression) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function constructor –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        try {
            return Function(`"use strict"; return (${expression})`)();
        } catch (error) {
            throw new Error('–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏');
        }
    }

    formatNumber(number) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (typeof number !== 'number' || isNaN(number)) {
            return '0';
        }
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 10 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        const rounded = Math.round(number * 10000000000) / 10000000000;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é
        return rounded.toString().replace('.', ',');
    }

    formatExpressionForHistory(expression) {
        return expression
            .replace(/\*/g, '√ó')
            .replace(/\//g, '√∑')
            .replace(/\./g, ',');
    }

    updateDisplay() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        const displayExpression = this.currentExpression || '0';
        this.expressionElement.textContent = this.formatExpressionForHistory(displayExpression);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.currentExpression && !this.shouldResetDisplay) {
            try {
                const tempExpression = this.currentExpression.replace(/√ó/g, '*').replace(/√∑/g, '/');
                if (this.isValidExpression(tempExpression) && !this.isLastCharOperator()) {
                    const tempResult = this.evaluateExpression(tempExpression);
                    if (!isNaN(tempResult) && isFinite(tempResult)) {
                        this.resultElement.textContent = this.formatNumber(tempResult);
                        return;
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.resultElement.textContent = this.formatExpressionForHistory(displayExpression);
    }
}

// ===== INITIALIZATION =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    window.toast = new ToastManager();
    window.themeManager = new ThemeManager();
    window.historyManager = new HistoryManager();
    window.memoryManager = new MemoryManager();
    window.calculator = new Calculator();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
        window.toast.success('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }, 500);
    
    console.log('üßÆ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:');
    console.log('- calculator: –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
    console.log('- historyManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π');
    console.log('- memoryManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é');
    console.log('- themeManager: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ:', event.error);
    if (window.toast) {
        window.toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
window.addEventListener('resize', () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ
    if (window.innerWidth <= 768 && window.historyManager && window.historyManager.isVisible) {
        window.historyManager.togglePanel();
    }
});

// Service Worker –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Service Worker –¥–ª—è PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    });
}